2023-04-04 23:09:56,378{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w echo --bin ././1_echo/./1_echo --node-count 1 --time-limit 10
2023-04-04 23:09:56,437{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x17734113"
         "maelstrom.db$db$reify__16142@17734113"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "echo"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x7d3a9061" "2023-04-04T23:09:56.346+02:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x2a2f7a61"
         "maelstrom.net$jepsen_net$reify__15251@2a2f7a61"]
 :client
 #object[maelstrom.workload.echo$client$reify__16863
         "0x8d40f07"
         "maelstrom.workload.echo$client$reify__16863@8d40f07"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x196c8b93"
         "java.util.concurrent.CyclicBarrier@196c8b93"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 5
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x307ca947"
         "jepsen.checker$compose$reify__11881@307ca947"]
 :argv
 ("test"
  "-w"
  "echo"
  "--bin"
  "././1_echo/./1_echo"
  "--node-count"
  "1"
  "--time-limit"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@61d1315b"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@49d5b651"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "././1_echo/./1_echo"
 :generator
 (jepsen.generator.TimeLimit
  {:limit 10000000000,
   :cutoff nil,
   :gen (jepsen.generator.Any
         {:gens [(jepsen.generator.OnThreads
                  {:f #{:nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x4a03c4bc"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@4a03c4bc"],
                   :gen nil})
                 (jepsen.generator.OnThreads
                  {:f #jepsen.generator.context.AllBut{:element :nemesis},
                   :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                           "0x3d0c88f4"
                                           "jepsen.generator.context$make_thread_filter$lazy_filter__9167@3d0c88f4"],
                   :gen (jepsen.generator.Stagger
                         {:dt 400000000,
                          :next-time nil,
                          :gen (jepsen.generator.EachThread
                                {:fresh-gen #object[maelstrom.workload.echo$workload$fn__16882
                                                    "0x5aad4194"
                                                    "maelstrom.workload.echo$workload$fn__16882@5aad4194"],
                                 :context-filters #object[clojure.core$promise$reify__8591
                                                          "0x50a1c2f3"
                                                          {:status :pending,
                                                           :val nil}],
                                 :gens {}})})})]})})
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x453ca7f"
         "maelstrom.net$jepsen_os$reify__15254@453ca7f"]
 :time-limit 10
 :workload :echo
 :consistency-models [:strict-serializable]
 :topology :grid}

2023-04-04 23:09:58,243{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2023-04-04 23:09:58,244{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2023-04-04 23:09:58,246{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2023-04-04 23:09:58,249{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2023-04-04 23:09:58,250{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2023-04-04 23:09:58,250{GMT}	INFO	[jepsen node n0] maelstrom.process: launching ././1_echo/./1_echo []
2023-04-04 23:09:58,276{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2023-04-04 23:09:58,291{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:echo	"Please echo 59"
2023-04-04 23:09:58,297{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:ok	:echo	{:echo "Please echo 59", :in_reply_to 1, :msg_id 1, :type "echo_ok"}
2023-04-04 23:09:58,479{GMT}	INFO	[Jepsen shutdown hook] jepsen.core: Downloading DB logs before JVM shutdown...
